_BIT_TYPE = [
    [3, 2, 5, 6, 6, 6, 6, 6, 6, 2, 3, 2, 2, 6, 1, 1, 1, 1, 1, 1, 6, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 4, 4, 1, 1, 1, 1, 4, 4, 2, 2, 3, 2, 4, 4, 4, 4, 4, 4, 5, 2, 3],
    [3, 2, 5, 6, 6, 6, 6, 6, 6, 2, 3, 2, 2, 6, 1, 1, 1, 1, 1, 1, 6, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 4, 4, 1, 1, 1, 1, 4, 4, 2, 2, 3, 2, 4, 4, 4, 4, 4, 4, 5, 2, 3],
    [3, 2, 5, 6, 6, 6, 6, 6, 6, 2, 3, 2, 2, 6, 1, 1, 1, 1, 1, 1, 6, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 4, 4, 1, 1, 1, 1, 4, 4, 2, 2, 3, 2, 4, 4, 4, 4, 4, 4, 5, 2, 3],
    [3, 2, 5, 6, 6, 6, 6, 6, 6, 2, 3, 2, 2, 6, 1, 1, 1, 1, 1, 1, 6, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 4, 4, 1, 1, 1, 1, 4, 4, 2, 2, 3, 2, 4, 4, 4, 4, 4, 4, 5, 2, 3],
    [3, 2, 5, 6, 6, 6, 6, 6, 6, 2, 3, 2, 2, 6, 1, 1, 1, 1, 1, 1, 6, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 4, 4, 1, 1, 1, 1, 4, 4, 2, 2, 3, 2, 4, 4, 4, 4, 4, 4, 5, 2, 3],
    [3, 2, 5, 6, 6, 6, 6, 6, 6, 2, 3, 2, 2, 6, 1, 1, 1, 1, 1, 1, 6, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 4, 4, 1, 1, 1, 1, 4, 4, 2, 2, 3, 2, 4, 4, 4, 4, 4, 4, 5, 2, 3],
    [3, 2, 5, 6, 6, 6, 6, 6, 6, 2, 3, 2, 2, 6, 1, 1, 1, 1, 1, 1, 6, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 4, 4, 1, 1, 1, 1, 4, 4, 2, 2, 3, 2, 4, 4, 4, 4, 4, 4, 5, 2, 3],
]


class DecodeError(ValueError):
    pass


def _crc10(data):
    result = 0x3ff
    for d in data:
        result ^= d << 2
        for i in range(8):  # TODO: simplify
            if result & 0x200 == 0:
                result <<= 1
            else:
                result <<= 1
                result ^= 0x233
        result &= 0x3ff
    return result


def decode(bits):
    if len(bits) != 149:
        raise DecodeError()
    if bits[-2]:  # rotated
        bits = bits[::-1]
    if not bits[2]:
        raise DecodeError()

    payload = []
    checked = []
    checksum = 0
    checksum_len = 0
    mode = 0
    mode_bits = 0
    mode_len = 0
    for i, b in enumerate(bits):
        t = _BIT_TYPE[mode][i]
        if t == 0:  # freely usable
            continue
        elif t == 1:  # payload
            payload.append(b)
        elif t == 2:  # quiet zone
            if b:
                raise DecodeError()
            continue
        elif t == 3:  # corner
            if not b:
                raise DecodeError()
            continue
        elif t == 4:  # checksum
            checksum |= b << checksum_len
            checksum_len += 1
            continue
        elif t == 5:  # direction
            pass
        elif t == 6:  # mode
            mode_bits |= b << (8 - mode_len - 1)
            mode_len += 1
            if mode_len == 3:
                mode = mode_bits >> 5
                if mode >= len(_BIT_TYPE):
                    raise DecodeError()
        else:
            raise DecodeError()
        checked.append(b)

    checked_bytes = []
    for i, b in enumerate(checked):
        if i % 8 == 0:
            checked_bytes.append(0)
        checked_bytes[i // 8] |= b << (8 - (i % 8) - 1)
    if _crc10(checked_bytes) != checksum:
        raise DecodeError('Invalid checksum')

    prefix = [True] + [False] * 6
    for i in range(8):
        prefix.append(mode_bits >> (8 - i - 1) & 1 == 1)

    result = [0] * 16
    for i, b in enumerate(prefix + payload):
        result[i // 8] |= b << (8 - (i % 8) - 1)
    return bytes(result)
